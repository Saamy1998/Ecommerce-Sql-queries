-- Create the database
drop database if exists ecommerce;
create database ecommerce;
use ecommerce;

-- Create customers table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT
);

-- Create products table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT
);

-- Create orders table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Insert sample data
INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john@example.com', '123 Main St'),
('Jane Smith', 'jane@example.com', '456 Oak St'),
('Alice Brown', 'alice@example.com', '789 Pine St');

INSERT INTO products (name, price, description) VALUES
('Product A', 25.00, 'Description for Product A'),
('Product B', 30.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C');

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, CURDATE() - INTERVAL 10 DAY, 75.00),
(2, CURDATE() - INTERVAL 20 DAY, 120.00),
(3, CURDATE() - INTERVAL 5 DAY, 200.00);

-- Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT c.* FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get the total amount of all orders placed by each customer
SELECT c.id, c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;

-- Update the price of Product C to 45.00
UPDATE products SET price = 45.00 WHERE name = 'Product C';

-- Add a new column discount to the products table
ALTER TABLE products ADD COLUMN discount DECIMAL(5,2) DEFAULT 0;

-- Retrieve the top 3 products with the highest price
SELECT * FROM products ORDER BY price DESC LIMIT 3;

-- Get the names of customers who have ordered Product A
SELECT DISTINCT c.name FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

-- Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT o.id, c.name, o.order_date FROM orders o
JOIN customers c ON o.customer_id = c.id;

-- Retrieve the orders with a total amount greater than 150.00
SELECT * FROM orders WHERE total_amount > 150.00;

-- Normalize by creating an order_items table
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Update orders table to remove total_amount column
ALTER TABLE orders DROP COLUMN total_amount;

-- Retrieve the average total of all orders
SELECT AVG(o.total_amount) AS average_order_total FROM orders o;
